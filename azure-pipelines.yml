trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)
## Step-4: Scan the Code using the tfsec and publish the results
stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
#      - task: PublishPipelineArtifact@1
#        displayName: Publish Artifacts
#        inputs:
#          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
#          artifact: 'terraform-manifests-out'
#          publishLocation: 'pipeline'
#      - task: TerraformInstaller@0
#        displayName: Terraform Install
#        inputs:
#          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          ensureBackend: true
          backendAzureRmResourceGroupName: 'TFSE-storage-rg'
          backendAzureRmResourceGroupLocation: 'East US'
          backendAzureRmStorageAccountName: 'terraformstatexlrwsri'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false
      - task: Bash@3
        inputs:
         targetType: 'inline'
         script: |
          mkdir TFSecReport
          docker pull tfsec/tfsec:latest
          docker run --rm -v "$(pwd):/src" tfsec/tfsec ./src --format JUnit --include-passed > TFSecReport/TFSec-Report.xml
          docker run --rm -v "$(pwd):/src" tfsec/tfsec ./src
#          workingDirectory: '$(System.DefaultWorkingDirectory)'
        displayName: TFSec Static Code Analysis
        condition: always()
        continueOnError: true
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: TFSec Report'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)'
          ArtifactName: 'TFSecReport'
          publishLocation: 'Container'
# Publish the results of the TFSec analysis as Test Results to the pipeline
      - task: PublishTestResults@2
        displayName: Publish TFSecReport Test Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/*TFSec-Report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)'
          testRunTitle: TFSec Scan
          mergeTestResults: false
          failTaskOnFailedTests: false
          publishRunAttachments: true        